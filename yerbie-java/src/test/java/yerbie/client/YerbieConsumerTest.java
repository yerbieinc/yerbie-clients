package yerbie.client;

import static org.junit.Assert.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.google.common.util.concurrent.MoreExecutors;
import java.util.concurrent.ExecutorService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import yerbie.StubData;
import yerbie.autogenerated.YerbieAPI;
import yerbie.exception.SerializationException;
import yerbie.job.Job;
import yerbie.serde.*;

@RunWith(MockitoJUnitRunner.class)
public class YerbieConsumerTest {
  ExecutorService executorService = MoreExecutors.newDirectExecutorService();
  @Mock YerbieAPI mockYerbieAPI;
  @Mock JobSpecTransformer mockJobSpecTransformer;
  @Mock DataTransformer mockDataTransformer;
  @Mock JobRepository mockJobRepository;
  @Mock JSONJobDataTransformer mockJsonJobDataTransformer;
  YerbieConsumer yerbieConsumer;

  @Before
  public void setUp() {
    yerbieConsumer =
        new YerbieConsumer(
            executorService,
            mockYerbieAPI,
            "queue",
            mockJobSpecTransformer,
            mockDataTransformer,
            mockJobRepository);
    when(mockDataTransformer.getJobDataTransformer(SerializationFormat.JSON))
        .thenReturn(mockJsonJobDataTransformer);
  }

  @Test
  public void testFetchReturnsNull() {
    when(mockYerbieAPI.reserveJob("queue")).thenReturn(StubData.EMPTY_JOB_REQUEST);
    assertFalse(yerbieConsumer.fetchAndSubmitOneJob());
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testFetchValidJob() throws Exception {
    StubData.TestJob jobToRun = new StubData.TestJob();
    when(mockYerbieAPI.reserveJob("queue")).thenReturn(StubData.VALID_JOB_REQUEST);
    when(mockJobSpecTransformer.deserializeJobSpec(StubData.TEST_JOB_SPEC_DATA_STRING))
        .thenReturn(StubData.TEST_JOB_SPEC);
    when(mockJsonJobDataTransformer.deserializeJobData(
            StubData.TEST_JOB_SPEC.getSerializedJobData(),
            Class.forName(StubData.TEST_JOB_SPEC.getJobClass())))
        .thenReturn((JobData) StubData.NO_JOB_DATA);
    when(mockJobRepository.findJobForJobData(StubData.NO_JOB_DATA.getJobData()))
        .thenReturn((Job) jobToRun);

    assertTrue(yerbieConsumer.fetchAndSubmitOneJob());

    verify(mockYerbieAPI).finishedJob("jobToken");
    assertEquals(1, jobToRun.getCounter());
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testFetchValidJobWithData() throws Exception {
    StubData.TestJobWithData jobToRun = new StubData.TestJobWithData();
    when(mockYerbieAPI.reserveJob("queue")).thenReturn(StubData.VALID_JOB_REQUEST);
    when(mockJobSpecTransformer.deserializeJobSpec(StubData.TEST_JOB_SPEC_DATA_STRING))
        .thenReturn(StubData.TEST_JOB_SPEC);
    when(mockJsonJobDataTransformer.deserializeJobData(
            StubData.TEST_JOB_SPEC.getSerializedJobData(),
            Class.forName(StubData.TEST_JOB_SPEC.getJobClass())))
        .thenReturn((JobData) StubData.TEST_YERBIE_JOB_DATA);
    when(mockJobRepository.findJobForJobData(StubData.TEST_YERBIE_JOB_DATA.getJobData()))
        .thenReturn((Job) jobToRun);

    assertTrue(yerbieConsumer.fetchAndSubmitOneJob());

    verify(mockYerbieAPI).finishedJob("jobToken");
    assertEquals("name", jobToRun.getName());
  }

  @Test
  public void testSerializationException() throws Exception {
    when(mockYerbieAPI.reserveJob("queue")).thenReturn(StubData.VALID_JOB_REQUEST);
    when(mockJobSpecTransformer.deserializeJobSpec(StubData.TEST_JOB_SPEC_DATA_STRING))
        .thenThrow(new SerializationException(new RuntimeException()));

    assertTrue(yerbieConsumer.fetchAndSubmitOneJob());
    verify(mockYerbieAPI).finishedJob("jobToken");
  }

  @Test
  public void testClassNotFoundException() throws Exception {
    JobSpec badJobSpec = new JobSpec("badClass", "jobData", SerializationFormat.JSON);
    when(mockYerbieAPI.reserveJob("queue")).thenReturn(StubData.VALID_JOB_REQUEST);
    when(mockJobSpecTransformer.deserializeJobSpec(StubData.TEST_JOB_SPEC_DATA_STRING))
        .thenReturn(badJobSpec);

    assertTrue(yerbieConsumer.fetchAndSubmitOneJob());
    verify(mockYerbieAPI).finishedJob("jobToken");
  }
}
