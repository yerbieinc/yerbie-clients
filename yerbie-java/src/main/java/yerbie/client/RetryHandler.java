package yerbie.client;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import yerbie.autogenerated.YerbieAPI;
import yerbie.autogenerated.models.JobRequest;
import yerbie.exception.SerializationException;
import yerbie.job.RetryPolicy;
import yerbie.serde.JobSpec;
import yerbie.serde.JobSpecTransformer;

public class RetryHandler {
  private static final Logger LOGGER = LoggerFactory.getLogger(RetryHandler.class);

  private final YerbieAPI yerbieAPI;
  private final JobSpecTransformer jobSpecTransformer;

  public RetryHandler(YerbieAPI yerbieAPI, JobSpecTransformer jobSpecTransformer) {
    this.yerbieAPI = yerbieAPI;
    this.jobSpecTransformer = jobSpecTransformer;
  }

  public void handleRetry(JobSpec jobSpec, JobRequest jobRequest, int currentRuns, Exception ex) {
    RetryPolicy retryPolicy = jobSpec.getRetryPolicy();

    yerbieAPI.finishedJob(jobRequest.jobToken());

    if (!retryPolicy.shouldRetry(currentRuns)) {
      LOGGER.info(
          "Encountered an exception when running. {} with token {} has reached the limit of {} and will no longer run. Exception msg: {}",
          jobSpec.getJobClass(),
          jobRequest.jobToken(),
          retryPolicy.getTotalRetries(),
          ex.getMessage());
      return;
    }

    long nextDelaySeconds = retryPolicy.getNextDelaySeconds(currentRuns);

    try {
      JobSpec newJobSpec =
          new JobSpec(
              jobSpec.getJobClass(),
              jobSpec.getSerializedJobData(),
              jobSpec.getSerializationFormat(),
              jobSpec.getRetryPolicy(),
              currentRuns);
      String serializedJobSpec = jobSpecTransformer.serializeJobSpec(newJobSpec);

      yerbieAPI.scheduleJob(
          jobRequest.withJobData(serializedJobSpec).withDelaySeconds(nextDelaySeconds));

      LOGGER.info(
          "Job with token {} encountered exception {}. It has been queued for retry. It has ran {} times.",
          jobRequest.jobToken(),
          ex.getMessage(),
          currentRuns);
    } catch (SerializationException serializationException) {
      LOGGER.error("Encountered serialization exception in retry handler.", serializationException);
    }
  }
}
